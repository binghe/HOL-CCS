%%%% -*- Mode: LaTeX -*-
%%
%% This is the draft of the 2nd part of EXPRESS/SOS 2018 paper, co-authored by
%% Prof. Davide Sangiorgi and Chun Tian.

\subsection{CCS and its transitions by SOS rules}

In the formalisation of CCS, 
the type ``\HOLty{:'b Label}'' ($\beta$ is a
type variable) accounts for visible actions, divided into input
and output actions:
\begin{lstlisting}
val _ = Datatype `Label = name 'b | coname 'b`;
\end{lstlisting}
Then
the type ``\HOLty{:'b Action}'' is the
union of all visible and invisible actions. The cardinality of
``\HOLty{:'b Action}'' (and therefore of all
CCS types built on top of it) 
 depends on the choice of initial  type $\beta$.

The core datatype ``\HOLty{:('a, 'b) CCS}'', accounting for the CCS syntax, is then defined as an inductive
datatype in HOL, based on its Datatype package: ($\alpha$ is the type
variable for recursion variables) 
\begin{lstlisting}
val _ = Datatype `CCS = nil
		      | var 'a
		      | prefix ('b Action) CCS
		      | sum CCS CCS
		      | par CCS CCS
		      | restr (('b Label) set) CCS
		      | relab CCS ('b Relabeling)
		      | rec 'a CCS`;
\end{lstlisting}

We have added some  grammar support using HOL's powerful pretty printer, to represent CCS
processes in more readable forms (as shown in the ``HOL (abbrev.)''
column in Table \ref{tab:ccsoperator}, the rest of table has listed the notation of typical CCS processes and
major operators supported by above definition). For restriction
operator, we chose to takes a set of names, rather than a
  single name as in the  CCS syntax, to prevent the formalisation
  efforts on the equivalence of CCS processes with different order of
  nested restrictions. Also, we don't assume that al recursion are
  guarded, i.e. any term like \texttt{var X} must appear in \texttt{P} of \texttt{rec X P}.

%  (Notice the use of
% recursition operator for representing process constants)
\begin{table}[h]
\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
\textbf{Operator} & \textbf{CCS Notation} & \textbf{HOL term} &
                                                                \textbf{HOL (abbrev.)}\\
\hline
nil & $\textbf{0}$ & \HOLtm{nil} & \HOLtm{nil} \\
prefix & $u.P$ & \texttt{prefix u P} & \HOLtm{prefix u P} \\
sum & $P + Q$ & \texttt{sum P Q} & \HOLtm{sum P Q} \\
parallel & $P \,\mid\, Q$ & \texttt{par P Q} & \HOLtm{P || Q} \\
restriction & $(\nu\;L)\;P$ & \texttt{restr L P} & \HOLtm{restr L P}
  \\
recursion & $A$ with $A\Defi P$ & \texttt{rec A P} & \HOLtm{rec A P}
  \\
\hline
input action & $a$ & \texttt{label (name a)} & \HOLtm{label (name a)} \\
output action & $\outC a$ & \texttt{label (coname a)} & \HOLtm{label (coname a)} \\
\hline
\end{tabular}
\end{center}
\vspace{-1em}
   \caption{Syntax of CCS operators}
   \label{tab:ccsoperator}
\end{table}

The transition semantics of CCS processes  follows
the Structural Operational Semantics (SOS) rules in
Figure~\ref{f:LTSCCS}:
\begin{alltt}
\HOLthm{CCS.PREFIX}\hfill\texttt{[PREFIX]}
\HOLthm{CCS.SUM1}\hfill\texttt{[SUM1]}
\HOLthm{CCS.SUM2}\hfill\texttt{[SUM2]}
\HOLthm{CCS.PAR1}\hfill\texttt{[PAR1]}
\HOLthm{CCS.PAR2}\hfill\texttt{[PAR2]}
\HOLthm{CCS.PAR3}\hfill\texttt{[PAR3]}
\HOLthm{CCS.RESTR}\hfill\texttt{[RESTR]}
\HOLthm{CCS.RELABELING}\hfill\texttt{[RELABELING]}
\HOLthm{CCS.REC}\hfill\texttt{[REC]}
\end{alltt}

Here the rule \texttt{[REC]} (Recursion)
 says that if we substitute all appearences of variable $A$ in $E$ to
$(\mathbf{rec}\; A\; E)$ and the resulting process has a transition to $E_1$
with action $u$, then $(\mathbf{rec}\; A\; E)$ has the same
transition. From the HOL  viewpoint, these
SOS rules are \emph{inductive 
  definitions} on the 3-ary relation \HOLtm{TRANS} of type ``\HOLty{:('a, 'b) CCS ->
  'b Action -> ('a, 'b) CCS -> bool}'', generated by HOL4's 
\texttt{Hol_reln} function.

The ultimate result (initially done by Nesi)
at this point, is a complex Standard ML function
  taking a CCS process and returning a theorem indicating all its direct transitions.
For instance, we know that the process $(a.0 | \bar{a}.0)$ have three
possible transitions: $(a.0 | \bar{a}.0) \overset{a}{\longrightarrow}
(0 | \bar{a}.0)$, $(a.0 | \bar{a}.0)
\overset{\bar{a}}{\longrightarrow} (a.0 | 0)$ and $(a.0 | \bar{a}.0)
\overset{\tau}{\longrightarrow} (0 | 0)$.
To completely decide all possible transitions, if done manually, the
following facts should be proved:
\begin{enumerate}
\item there exists transitions from $(a.0 | \bar{a}.0)$ (optional);
\item the correctness for each of the transitions by SOS rules;
\item there's no other transition beside the three existing ones.
\end{enumerate}
For large complex processes it's surprisingly hard to manually prove the
non-existence of transitions. Instead, if we call the ML function \texttt{CCS\_TRANS\_CONV} on the
root process $(a.0 | \bar{a}.0)$:
\begin{lstlisting}
> CCS_TRANS_CONV
	 ``par (prefix (label (name "a")) nil)
	       (prefix (label (coname "a")) nil)``
\end{lstlisting}
We immediately get the following theorem, which completely answers the question:
\begin{alltt}
\HOLthm{Example.ex_A}
\end{alltt}
