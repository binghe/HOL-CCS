%%%% -*- Mode: LaTeX -*-
%%
%% This is the draft of the 2nd part of EXPRESS/SOS 2018 paper, co-authored by
%% Prof. Davide Sangiorgi and Chun Tian.

\subsection{Coarsest (pre)congruence contained in $\approx$ ($\succeq_{\mathrm{bis}}$)}
\label{s:coarsest}

% The ``coarsest congruence contained in weak bisimilarity ($\approx$)''
% theorem in CCS is somehow special, as its current known proofs either
% rely on quite restricted conditions, or have an extremely complicated proof
% (c.f. van Glabbeek's paper) in
% which ordinal theory is required.  Actually even the relationship
% between its name and statement is not well explained in many CCS
% textbooks. But van Glabbeek's paper has given the so far clearest
% explanation, here we briefly repeat his arguments:

Bisimilarity ($\approx$) is not  congruence, since not preserved by 
the sum operator. For this reason rooted bisimilarity has been
introduced (Definition~\ref{d:rootedBisimilarity}). 
In this subsection we discuss  two proofs of the result stating that
rooted bisimilarity is the coarsest congruence contained in
bisimilarity.
% : Milner's proof \cite{Mil89}, that requires
% that no process can use all available names; and van Glabbeek's proof
% \cite{vanGlabbeek:2005ur}, that does not require additional assumptions. 

The `coarsest congruence contained in bisimilarity' is 
the context closure, below called 
\emph{weak bisimilarity congruence}   and % written $[\approx]$, 
formalised thus:
\begin{alltt}
\HOLthm[def]{CoarsestCongr.WEAK_CONGR}\hfill{[WEAK_CONGR]}
\HOLthm[def]{Congruence.CC_def}\hfill{[CC_def]}
\end{alltt}

Given the central role of the  
 sum operator, we also consider the closure of bisimilarity under such
 operator, 
below called \emph{sum equivalence} and written $\approx^+$:
\begin{alltt}
\HOLthm[def]{CoarsestCongr.SUM_EQUIV}\hfill{[SUM_EQUIV]}
\end{alltt}


% it doesn't satisfy substitutivity on direct sums (but if the CCS syntax
% is non-standard, i.e. has only prefixed sums, $\approx$ is indeed a
% congruence). The purpose is to find a coarsest congruence contained in
% weak bisimilarity. (``coarsest'' means, any other congruence finer than it must be contained in it)
% There're two ways to build a congruence from weak bisimilarity, one
% way is the standard definition for observational congruence (rooted
% weak bisimilarity) $\approx^c$ in CCS textbooks, but even it's proven to be a
% congruence we don't know if it's coarsest one.  The other way is to
% build a (pre)congruence closure (Def ??) directly upon
% the original weak bisimilarity relation, we call the resulting
% relation ``Weak bisimilarity congruence'' ($[\approx]$):
% \begin{alltt}
% \HOLthm[def]{CoarsestCongr.WEAK_CONGR}
% \end{alltt}
% It can be shown that any such (pre)congruence closure is automatically coarsest.
%
% Now it remains to prove that, the congrunce relation built by above
% two quite different approaches actually coincide. To achive this goal,
% we first noticed that, all other operators beside sums used in
% semantic context doesn't matter, because they're already substituible
% for weak bisimilarity. The only important operator is the sum
% operator. To focus on this important operator, we can temporily
% introduce another concept called \emph{sum equivalence}:
% \begin{alltt}
% \HOLthm[def]{CoarsestCongr.SUM_EQUIV}
% \end{alltt}
Rooted bisimilarity, being a congruence contained in bisimilarity,  
is contained in   weak bisimilarity congruence that, in turn,
trivially is contained in sum
equivalence. Thus the crux is proving that sum equivalence implies
rooted bisimilarity:
\begin{equation}
\label{equa:pq}
\forall p\; q.\; ( \forall r.\; p+r \approx q+r ) \Rightarrow p \approx^c\! q  
\end{equation}
% \begin{displaymath}
% \xymatrix{
% {\textrm{Weak bisimilarity } (\approx)} & {\textrm{Sum
%     equivalence } (\approx^+)} \ar@/^3ex/[ldd]^{\subseteq ?}\\
% {\textrm{Weak bisim. congruence } ([\approx])}
% \ar[u]^{\subseteq} \ar[ru]^{\subseteq} \\
% {\textrm{Rooted bisimilarity } (\approx^c)} \ar[u]^{\subseteq}
% }
% \end{displaymath}
The standard argument \cite{Mil89} requires that $p$
and $q$ do not make use of all possible labels.
Formalising such an argument requires however 
a detailed
treatment on free and bound names  of CCS
processes (with the restriction operator being a binder).
However, the proof of (\ref{equa:pq}) can be carried out 
% But it's
% not easy to formalize and use such an assumption without a detailed
% treatment on free and bound names (visible actions) of CCS
% processes.\footnote{There're totally four such concepts: 1) free names
% are all visible actions appearing in a CCS term without surrounding
% $\nu$ (restriction) operator on the same action; 2) bound names are
% the set of all actions ever used by $\nu$ (restriction) operator; 3)
% free variables (or equation variables) are those variables without a
% definition given by recursion
% operator; 4) bound variables (process constants) are variables with
% definitions given by recursion operator. All CCS results using these
% concepts are not touched so far, although these four concepts are
% successfully defined using HOL's set and list theories.} However, by
just assuming that the
initial weak transitions (those directly emanating from 
 $p$ and $q$) do not use all \hl{available visible actions}.
% analyzing the proof steps, we found that, what's really required is to
% not use up all available labels in those weak transitions directly
% lead from $p$ and $q$. In another words, even they have used all
% available labels, as long as their first weak transitions didn't, the
% whole proof can still be finished.\footnote{Further more, $p$ and $q$
%   can be considered separately: the proof can be finished as long as
%   \emph{each} of them didn't use up all labels on first weak
%   transition, while the union of these labels are all labels.}
We
have formalised this property and
 called it the \emph{free action} property:
\begin{alltt}
\HOLthm[def]{CoarsestCongr.free_action_def}\hfill{[free_action_def]}
\end{alltt}

With this property, the formalisation of (\ref{equa:pq}) says:
%\begin{theorem}{(Coarsest congruence contained in $\wb$)}
\begin{alltt}
\HOLthm{CoarsestCongr.COARSEST_CONGR_RL}
\end{alltt}
%\end{theorem}

For contraction and rooted contraction, the situation and proof
steps are the same, and the corresponding HOL4 theorem says:
%\begin{theorem}{(Coarsest precongruence contained in $\contr$)}
\begin{alltt}
\HOLthm{Contraction.COARSEST_PRECONGR_RL}
\end{alltt}
%\end{theorem}

The above proof precisely follows \cite{Mil89}. \hl{Noticed that,
if only $p$ (or $q$) has the free action while the other has used all available
actions, the classic assumption $\mathrm{fn}(p) \cup
\mathrm{fn}(q) \neq \mathscr{L}$ (here $\mathrm{fn}$ stands for \emph{free
  names}) does not hold, and the proof cannot be finished.} Our result is a bit stronger in the
sense that, $p$ and $q$ do not really need to have the \emph{same} free action.

\hl{There exists a very different proof,
following van Glabbeek} \cite{vanGlabbeek:2005ur}, which does not
require any additional assumption.
\hl{However, this proof relays on arbitrary infinite sum of 
processes and uses transfinite induction to obtain
an arbitary large sequence of processes % (firstly introduced by  Klop)
 that are all pairwise non-bisimilar.} We have also formalised this proof.
However, since the typed logic
implemented in various HOL systems (including Isabelle/HOL) is not
strong enough to define a type for all possible ordinal values \cite{norrish2013ordinals},
we have replaced transfinite induction with plain induction; as a consequence, the final
result is about a restricted class of processes (which we have taken
to be the finite-state processes). We omit the details due to space
limits. (c.f. \cite{Tian:2017wrba} for details)
