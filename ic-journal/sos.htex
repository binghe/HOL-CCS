%%%% -*- Mode: LaTeX -*-
%%
%% This is the draft of the 2nd part of EXPRESS/SOS 2018 paper, co-authored by
%% Prof. Davide Sangiorgi and Chun Tian.

\subsection{CCS processes and their transitions}

In our CCS formalisation, the type ``\HOLty{:'b Label}'' (\texttt{'b} or
$\beta$ is the type variable for actions) accounts for visible actions, divided into input
and output actions, defined by HOL's Datatype package:
\begin{lstlisting}
val _ = Datatype `Label = name 'b | coname 'b`;
\end{lstlisting}
The type ``\HOLty{:'b Action}'' is the
union of all visible actions, plus invisible action $\tau$ (now based on
HOL's \texttt{option} theory). The cardinality of
``\HOLty{:'b Action}'' (and therefore of all
CCS types built on top of it)
 depends on the choice (or \emph{type-instantiation}) of type variable $\beta$.

The type ``\HOLty{:('a, 'b) CCS}'', accounting for the CCS
syntax\footnote{The order of type variables $\alpha$ and $\beta$
    is arbitrary. Our choice is aligned with other CCS literals.
$\mathrm{CCS}(h,k)$ is the CCS subcalculus that can use at most $h$ constants
and $k$ actions \cite{gorrieri2017ccs}. Thus, to formalize theorems on
such a calculus, the needed CCS type can be retrieved by instantiating the type
variables $\alpha$ and $\beta$ in ``\HOLty{:('a, 'b) CCS}'' with types
having the corresponding cardinalities $h$ and $k$. Monica Nesi goes
farther, by adding another type variable $\gamma$ for value-passing CCS
\cite{Nesi:2017wo}.}, is then defined inductively:
(\texttt{'a} or $\alpha$ is the type variable for recursion variables,
``\HOLty{:'b Relabeling}'' is the type of all relabeling functions,
\mbox{\color{blue}{\texttt{`}}} is for backquotes of HOL terms):
\begin{lstlisting}
val _ = Datatype `CCS = nil
		      | var 'a
		      | prefix ('b Action) CCS
		      | sum CCS CCS
		      | par CCS CCS
		      | restr (('b Label) set) CCS
		      | relab CCS ('b Relabeling)
		      | rec 'a CCS`;
\end{lstlisting}

We have added some grammar support,
 using HOL's powerful pretty printer, to represent CCS
processes in more readable forms (c.f. the column \hl{``\TeX{} output''}
of Table \ref{tab:ccsoperator}, which summarizes
the main syntactic notations of CCS). For the restriction
operator, we have chosen to allow a  set of names as a parameter, rather than a
  single name as in the ordinary  CCS syntax; this simplifies
the manipulation of
 processes with different orders of
  nested restrictions.
% Also, we do not assume that the uses of \texttt{var} are
%  guarded by \texttt{rec} of the same variable.

%  (Notice the use of
% recursion operator for representing process constants)
\begin{table}[h]
\begin{center}
\begin{tabular}{|c|c|c|c|c|}
\hline
\hl{\textbf{CCS concept}} & \hl{\textbf{Notation}} & \textbf{HOL term} &
                                             \textbf{HOL abbrev.} & \hl{\textbf{\TeX{} output}} \\
\hline
\hl{deadlock} & $\textbf{0}$ & \texttt{nil} & \texttt{nil} & \HOLtm{nil} \\
prefix & $\mu.P$ & \texttt{prefix u P} & \texttt{u..P} & \HOLtm{prefix u P} \\
\hl{summation} & $P + Q$ & \texttt{sum P Q} & \texttt{P + Q} & \HOLtm{sum P Q} \\
parallel \hl{composition} & $P \,\mid\, Q$ & \texttt{par P Q} & \texttt{P || Q} & \HOLtm{P || Q} \\
restriction & $(\nu{}L)\;P$ & \texttt{restr L P} & \texttt{(nu L) P} & \HOLtm{restr L P}  \\
recursion & $\recu A P$ & \texttt{rec A P} & \texttt{rec A P} & \HOLtm{rec A P}  \\
relabeling & $P\;[r\!f]$ & \texttt{relab P rf} &\texttt{relab P rf} & \HOLtm{relab P rf}  \\
\hl{constant/variable} & $A$ & \texttt{var A} &\texttt{var A} & \HOLtm{var A} \\
invisible action & $\tau$ & \texttt{tau} & \texttt{tau} & \HOLtm{tau} \\
input action & $a$ & \texttt{label (name a)} &\texttt{In(a)} & \HOLtm{label (name a)} \\
output action & $\outC a$ & \texttt{label (coname a)} & \texttt{Out(a)} & \HOLtm{label (coname a)} \\
\hline
\hl{variable substitution} & $E\{E'/X\}$ & \texttt{CCS_Subst E E' X} &
                                           \texttt{[E'/X]  E} & \HOLtm{CCS_Subst E E' X} \\
\hl{transition} & $P\overset{\mu}{\longrightarrow}Q$
                       & \texttt{TRANS P u Q} & \texttt{P ---u-> Q} & \HOLtm{TRANS P u Q} \\
\hl{weak transition} & $P\overset{\mu}{\Longrightarrow}Q$
                       & \texttt{WEAK\_TRANS P u Q} & \texttt{P ==u=> Q} & \HOLtm{WEAK_TRANS P u Q} \\
\hl{$\epsilon$--transition} & $P\overset{\epsilon}{\Longrightarrow}Q$
                       & \texttt{EPS P Q} & \texttt{EPS P Q} & \HOLtm{EPS P Q} \\
\hline
\end{tabular}
\end{center}
   \caption{Syntax of \hl{various CCS concepts in HOL}}
   \label{tab:ccsoperator}
\end{table}

The transition semantics of CCS processes follows Structural
Operational Semantics (SOS) in Fig.~\ref{f:LTSCCS}:
\begin{alltt}
\HOLthm{CCS.PREFIX}\hfill\texttt{[PREFIX]}
\HOLthm{CCS.SUM1}\hfill\texttt{[SUM1]}
\HOLthm{CCS.SUM2}\hfill\texttt{[SUM2]}
\HOLthm{CCS.PAR1}\hfill\texttt{[PAR1]}
\HOLthm{CCS.PAR2}\hfill\texttt{[PAR2]}
\HOLthm{CCS.PAR3}\hfill\texttt{[PAR3]}
\HOLthm{CCS.RESTR}\hfill\texttt{[RESTR]}
\HOLthm{CCS.RELABELING}\hfill\texttt{[RELABELING]}
\HOLthm{CCS.REC}\hfill\texttt{[REC]}
\end{alltt}

The last rule \texttt{REC} (Recursion)
 says that if we substitute all appearances of variable $A$ in $P$ to
$(\recu A P)$ and the resulting process has a transition to $P'$
with action $u$, then $(\recu A P)$ has the same
transition. In its definition, \texttt{CCS_Subst} is a recursive substutiion function
with the following long definition:
\begin{alltt}
\HOLthm[def]{CCS.CCS_Subst_def}\hfill{[CCS_Subst_def]}
\end{alltt}

From HOL's viewpoint, these
SOS rules are \emph{inductive
  definitions} on the tenary relation \HOLtm{TRANS} of type ``\HOLty{:('a, 'b) CCS ->
  'b Action -> ('a, 'b) CCS -> bool}'', generated by HOL's
\texttt{Hol_reln} function.

A useful facility exploiting the interplay
between HOL4 and Standard ML (that follows an idea by Nesi \cite{Nesi:1992ve})
 is a complex Standard ML function
  taking a CCS process and returning a theorem indicating all
  direct transitions of the process.\footnote{If the input process were
 infinite branching, due to the use of recursion or
    relabeling operators, the program will loop forever.}
For instance, we know that the process $(a.0 | \bar{a}.0)$ has three
possible transitions: $(a.0 | \bar{a}.0) \overset{a}{\longrightarrow}
(0 | \bar{a}.0)$, $(a.0 | \bar{a}.0)
\overset{\bar{a}}{\longrightarrow} (a.0 | 0)$ and $(a.0 | \bar{a}.0)
\overset{\tau}{\longrightarrow} (0 | 0)$.
To completely describe all possible transitions of a process, if done manually, the
following facts should be proved: (1) there exists transitions from
$(a.0 | \bar{a}.0)$ (optional); (2) the correctness for each of the
transitions; and (3) the non-existence of other transitions.

For large processes it may be surprisingly hard to manually prove the
non-existence of transitions.  Hence the usefulness of appealing to
the new  function \texttt{CCS\_TRANS\_CONV}.
For instance this function
is called on the  process $(a.0 | \bar{a}.0)$ thus:
(\mbox{\color{blue}{\texttt{``}}} is for double-backquotes of HOL
  terms, \mbox{\color{blue}{\texttt{>}}} is HOL's prompt)
\begin{lstlisting}
> CCS_TRANS_CONV ``par (prefix (label (name "a")) nil)
                       (prefix (label (coname "a")) nil)``
\end{lstlisting}
This returns the following theorem, indeed describing all immediate
transitions of the process:
\begin{alltt}
\HOLthm[nosp]{Example.ex_A}\hfill{[Example.ex_A]}
\end{alltt}

% next file: bisim.htex
