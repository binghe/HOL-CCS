%%%% -*- Mode: LaTeX -*-
%%
%% This is the draft of the 2nd part of EXPRESS/SOS 2018 paper, co-authored by
%% Prof. Davide Sangiorgi and Chun Tian.

\subsection{Coarsest (pre)congruence contained in $\approx$ ($\succeq_{\mathrm{bis}}$)}
\label{s:coarsest}

% The ``coarsest congruence contained in weak bisimilarity ($\approx$)''
% theorem in CCS is somehow special, as its current known proofs either
% rely on quite restricted conditions, or have an extremely complicated proof
% (c.f. van Glabbeek's paper) in
% which the theory of ordinals is required.  Actually even the relationship
% between its name and statement is not well explained in many CCS
% textbooks. But van Glabbeek's paper has given the so far clearest
% explanation, here we briefly repeat his arguments:

%As bisimilarity ($\approx$) is not congruence, for this reason rooted bisimilarity has been
%introduced (Def.~\ref{d:rootedBisimilarity}).
In this subsection we discuss two proofs of the fundamental result stating that
rooted bisimilarity is the coarsest congruence contained in
bisimilarity \cite{van2005characterisation,Gorrieri:2015jt,Mil89}:
\begin{equation}
\label{eq:coarsest}
\forall p\ \ q.\ p\ \rapprox\ \! q\ \Longleftrightarrow\ ( \forall r.\ p\ +\
r\ \approx\ q\ +\ r )\enspace.
\end{equation}

% : Milner's proof \cite{Mil89}, that requires
% that no process can use all available names; and van Glabbeek's proof
% \cite{van2005characterisation}, that does not require additional assumptions. 

The coarsest congruence
contained in (weak) bisimilarity, namely \emph{bisimilarity
  congruence}, is
the \emph{composition closure} (\texttt{CC}) of (weak) bisimilarity:
\begin{alltt}
\HOLthm[def,>>3]{CoarsestCongr.WEAK_CONGR}\hfill{[WEAK_CONGR]}
\HOLthm[def,>>3]{Congruence.CC_def}\hfill{[CC_def]}
\end{alltt}
We do not need to put $R\ g\ h$ in the antecedent of
  \texttt{CC\_def}, as this is anyhow obtained from the trivial context $(\lambda x.\,x)$.
\hl{The next result shows that, for any binary} relation $R$ 
on CCS processes, the composition closure of $R$ is always at least as
fine as $R$\hl{:} ($\subseteq_r$ stands for \emph{relational subset}.)
\begin{alltt}
\HOLthm[nosp]{Congruence.CC_is_finer}\hfill{[CC_is_finer]}
\end{alltt}
Furthermore, we prove that any (pre)congruence contained in $R$
\hl{(which needs not to be itself a (pre)congruence)}
is contained in the composition closure of $R$
(hence the closure is the coarsest one):
\begin{alltt}
\HOLthm[nosp]{Congruence.CC_is_coarsest}\hfill{[CC_is_coarsest]}
\HOLthm[nosp]{Congruence.PCC_is_coarsest}\hfill{[PCC_is_coarsest]}
\end{alltt}

Given the central role of the  
 summation, we also consider the relation closure of bisimilarity
 w.r.t. summation, called \emph{equivalence compatible with summation}
(\texttt{SUM_EQUIV}): %%, denoted by $\approx^+$: (not used this symbol)
\begin{alltt}
\HOLthm[def,>>3]{CoarsestCongr.SUM_EQUIV}\hfill{[SUM_EQUIV]}
\end{alltt}

% it doesn't satisfy substitutivity on direct sums (but if the CCS syntax
% is non-standard, i.e.~has only prefixed sums, $\approx$ is indeed a
% congruence). The purpose is to find a coarsest congruence contained in
% weak bisimilarity. (``coarsest'' means, any other congruence finer than it must be contained in it)
% There're two ways to build a congruence from weak bisimilarity, one
% way is the standard definition for observational congruence (rooted
% weak bisimilarity) $\rapprox$ in CCS textbooks, but even it's proven to be a
% congruence we don't know if it's coarsest one.  The other way is to
% build a (pre)congruence closure (Def ??) directly upon
% the original weak bisimilarity relation, we call the resulting
% relation ``Weak bisimilarity congruence'' ($[\approx]$):
% \begin{alltt}
% \HOLthm[def]{CoarsestCongr.WEAK_CONGR}
% \end{alltt}
% It can be shown that any such (pre)congruence closure is automatically coarsest.
%
% Now it remains to prove that, the congruence relation built by above
% two quite different approaches actually coincide. To achieve this goal,
% we first noticed that, all other operators beside sums used in
% semantic context doesn't matter, because they're already substitutable
% for weak bisimilarity. The only important operator is the sum
% operator. To focus on this important operator, we can temporally
% introduce another concept called \emph{sum equivalence}:
% \begin{alltt}
% \HOLthm[def]{CoarsestCongr.SUM_EQUIV}
% \end{alltt}
Rooted bisimilarity $\rapprox$ (a congruence contained in
$\wb$), is now contained in \texttt{WEAK_CONGR},
which in turn is trivially contained in \texttt{SUM_EQUIV}, as shown
in Fig.~\ref{fig:relationship}. Thus, to prove (\ref{eq:coarsest}),
the crux is to prove that \texttt{SUM_EQUIV} implies
rooted bisimilarity ($\rapprox$), making all three relations
($\rapprox$, \texttt{WEAK_CONGR} and \texttt{SUM_EQUIV}) coincide:
\begin{equation}
\label{equa:pq}
\forall p\ \ q.\ ( \forall r.\ p\ +\ r \;\approx\; q\ +\ r ) \
\Rightarrow\ p\ \rapprox\ \! q\enspace.
\end{equation}

\begin{figure}[ht]
\begin{displaymath}
\xymatrix{
{\textrm{Weak bisimilarity } (\approx)} & {\textrm{Equiv.
    compatible with summation (\texttt{SUM\_EQUIV})}}
\ar@/^3ex/[ldd]^{\supseteq\; ?}\\
{\textrm{Bisimilarity congruence (\texttt{WEAK\_CONGR})}}
\ar[u]^{\subseteq} \ar[ru]^{\subseteq} \\
{\textrm{Rooted bisimilarity } (\rapprox)} \ar[u]^{\subseteq}
}
\end{displaymath}
\caption{Relationships between several equivalences and $\wb$}
\label{fig:relationship}
\end{figure}

The standard argument \cite{Mil89} requires that $p$
and $q$ do not use up available labels (i.e.~visible actions).
Formalising such an argument requires  
a detailed treatment on free and bound names of CCS
processes (with the restriction operator being a binder).
However, the proof of (\ref{equa:pq}) can be carried out 
% But it's
% not easy to formalize and use such an assumption without a detailed
% treatment on free and bound names (visible actions) of CCS
% processes.\footnote{There're totally four such concepts: 1) free names
% are all visible actions appearing in a CCS term without surrounding
% $\nu$ (restriction) operator on the same action; 2) bound names are
% the set of all actions ever used by $\nu$ (restriction) operator; 3)
% free variables (or equation variables) are those variables without a
% definition given by recursion
% operator; 4) bound variables (process constants) are variables with
% definitions given by recursion operator. All CCS results using these
% concepts are not touched so far, although these four concepts are
% successfully defined using HOL's set and list theories.} However, by
just assuming that all immediate \emph{weak} derivatives of
 $p$ and $q$ do not use  all available labels.
% analyzing the proof steps, we found that, what's really required is to
% not use up all available labels in those weak transitions directly
% lead from $p$ and $q$. In another words, even they have used all
% available labels, as long as their first weak transitions didn't, the
% whole proof can still be finished.\footnote{Further more, $p$ and $q$
%   can be considered separately: the proof can be finished as long as
%   \emph{each} of them didn't use up all labels on first weak
%   transition, while the union of these labels are all labels.}
We have formalised this property and
 called it the \emph{free action} property:
\begin{alltt}
\HOLthm[def,>>3]{CoarsestCongr.free_action_def}\hfill{[free_action_def]}
\end{alltt}
%
With this property, the actual formalisation of (\ref{equa:pq}) says:
%\begin{theorem}{(Coarsest congruence contained in $\wb$)}
\begin{alltt}
\HOLthm[]{CoarsestCongr.COARSEST_CONGR_RL}\hfill{[COARSEST_CONGR_RL]}
\end{alltt}
%\end{theorem}

With an almost identical proof, rooted contraction
($\rcontr$) is also the coarsest
precongruence contained in the bisimilarity contraction ($\mcontrBIS$)
(the other direction is trivial):
%\begin{theorem}{(Coarsest precongruence contained in $\contr$)}
\vspace{-2ex}
\begin{alltt}
\hfill{[COARSEST_PRECONGR_RL]}
\HOLthm[]{Contraction.COARSEST_PRECONGR_RL}
\end{alltt}
%\end{theorem}

The formal proofs  of the above two results follow Milner's proof~\cite{Mil89}.
The assumption \hl{in} Milner's result 
requires $\mathrm{fn}(p) \cup
\mathrm{fn}(q) \neq \mathscr{L}$ (where $\mathrm{fn}$ stands for \emph{free
  names}), and is therefore strictly stronger than the assumption in
our result above. \hl{Indeed, in out result we} only look at immediate weak
derivatives for $p$ and $q$, \hl{and only requires that there is an input
or output action}
that never appears as a label. \hl{Furthermore, such an action need
not to be the same for $p$ and for $q$,
as an action $a$ and its complementary $\outC a$ are
considered as \emph{different} actions.}

There exists a different, more complex, proof of (\ref{eq:coarsest}),
given by van Glabbeek \cite{van2005characterisation}, which does not
require any additional assumption.
The core lemma says, for
any two processes $p$ and $q$, if there exists a \emph{stable} (i.e.~$\tau$-free)
 process $k$ which is not bisimilar with any derivative of $p$ and
 $q$, then \texttt{SUM_EQUIV} indeed implies rooted bisimilarity ($\rapprox$):
\begin{alltt}
\HOLthm{CoarsestCongr.PROP3_COMMON}\hfill{[PROP3_COMMON]}
\end{alltt}
\begin{alltt}
\HOLthm[def]{WeakEQ.STABLE'}\hfill{[STABLE]}
\end{alltt}
To construct this process $k$,
 the proof relies on arbitrary infinite sums of 
processes and uses transfinite induction to obtain
an arbitrary large sequence of processes (firstly introduced by Jan
Willem Klop \cite{van2005characterisation})
 that are all pairwise non-bisimilar.
We have only partially formalised
this proof (Theorem~\ref{thm:coarsestfiniteState} in next section), because ``the typed logic
implemented in various HOL systems (including Isabelle/HOL) is not
strong enough to define a type for all possible
ordinals''~\cite{norrish2013ordinals}.
\hl{As a consequence, the final result is only for finite-state
  CCS---a very restricted class.}

\subsection{Arbitrarily many non-bisimilar processes}
\label{ss:arbitrarily}

The assumption in the previous \texttt{PROP3_COMMON} requires the
existence of a special CCS process, which is not weakly bisimilar to
any sub-process emanating from the two root processes by weak
transitions.
\hl{There could be infinitely many such sub-processes, even on finitely
branching processes.}
We can, however, consider the equivalence classes of CCS processes
modulo weak bisimilarity.
If there are infinitely many of such classes, 
then it will be 
possible to choose one  that is distinct from all the (finitely many) states in the
graphs of the two given processes.  
This can be done following Klop's contruction \cite{van2005characterisation}.
 We call  ``Klop processes''  the processes in this construction:
\begin{definition}[Klop processes]
For each ordinal $\lambda$, and an arbitrary chosen non-$\tau$ action $a$,
define a CCS process $k_\lambda$ as follows:
\begin{itemize}
\item $k_0 = 0$,
\item $k_{\lambda+1} = k_\lambda + a.k_\lambda$ and
\item for $\lambda$ a limit ordinal, $k_\lambda = \sum_{\mu < \lambda}
  k_\mu$, meaning that $k_\lambda$ is constructed from all graphs
  $k_\mu$ for $\mu < \lambda$ by identifying their root.
\end{itemize}
\end{definition}
When processes are finite-state, that is,
the number of  states in which a process may evolve by performing
transitions is finite, 
we can use  the following subset of Klop processes, 
defined as a recursive function (on natural numbers) in HOL4:
\begin{definition}{(Klop processes as recursive function on natural numbers)}
\begin{alltt}
\HOLthm[def]{CoarsestCongr.KLOP_def}\hfill{[KLOP_def]}
\end{alltt}
\end{definition}

\hl{Following the inductive structure of the definition of Klop processes,}
  and using the SOS rules
  ($\mathrm{Sum}_1$) and ($\mathrm{Sum}_2$), we proved
the following properties of Klop functions:
\begin{proposition}{(Properties of Klop functions and processes)}
\begin{enumerate}
\item (All Klop processes are stable)
\begin{alltt}
\HOLthm{CoarsestCongr.KLOP_PROP0}\hfill[KLOP_PROP0]
\end{alltt}
\item (Any transition from a Klop process leads to a smaller Klop
  process, and conversely)
\begin{alltt}
\HOLthm{CoarsestCongr.KLOP_PROP1}\hfill{[KLOP_PROP1]}
\end{alltt}
\item (The weak version of the previous property)
\begin{alltt}
\HOLthm{CoarsestCongr.KLOP_PROP1'}\hfill{[KLOP_PROP1']}
\end{alltt}
\item (All Klop processes are distinct according to strong bisimilarity)
\begin{alltt}
\HOLthm{CoarsestCongr.KLOP_PROP2}\hfill{[KLOP_PROP2]}
\end{alltt}
\item (All Klop processes are distinct according to weak bisimilarity)
\begin{alltt}
\HOLthm{CoarsestCongr.KLOP_PROP2'}\hfill{[KLOP_PROP2']}
\end{alltt}
\item (Klop functions are one-one)
\begin{alltt}
\HOLthm{CoarsestCongr.KLOP_ONE_ONE}\hfill{[KLOP_ONE_ONE]}
\end{alltt}
\end{enumerate}
\end{proposition}
Having
 a recursive function  on all natural numbers,
  we can map these into a set containing  all Klop processes. 
We can therefore 
choose a number that is mapped onto a Klop process
that is distinct (i.e., not bisimilar)  from 
any  of the derivatives of two  given 
two finite-state CCS processes $p$ and $q$
(by definition, the number of such derivatives is finite).
This is done by 
appealing to a basic set-theory result.

% (processes 
% all states coming from
% two finite-state CCS processes $p$ and $q$ is finite. Choosing from an
% infinite set for an element distinct with any subprocess leading from
% $p$ and $q$, is always possible.  This result is purely mathematical,
% completely falling into basic set theory:
\begin{lemma}
Given an equivalence relation $R$ defined on a type, and two sets $A, B$
of elements in this type, 
if $A$ is finite, $B$ is infinite, and all elements
in $B$ belong to distinct equivalence classes, then there exists an element $k$ in $B$
which is not equivalent to any element in $A$:
\begin{alltt}
\HOLthm{CoarsestCongr.INFINITE_EXISTS_LEMMA}\hfill[INFINITE_EXISTS_LEMMA]
\end{alltt}
\end{lemma}
% \begin{proof}
%   We built an explicit mapping $f$ from $A$ to $B$\footnote{There're
%     multiple ways to prove this lemma, a simpler proof is to make a
%     reverse mapping from $B$ to the power set of $A$ (or further use
%     the Axiom of Choice (AC) to make a mapping from $B$ to $A$), then
%     the non-injectivity of this mapping will contradict the fact that
%     all elements in the infinite set are distinct. Our proof doesn't
%     need AC, and it relies on very simple truths about sets.}, for all
%   $x \in A$, $y = f(x)$ if $y \in B$ and $y$ is equivalent with
%   $x$. But it's possible that no element in $B$ is equivalent with
%   $x$, and in this case we just choose an arbitrary element as
%   $f(x)$. Such a mapping is to make sure the range of $f$ always fall
%   into $B$.

%   Now we can map $A$ to a subset of $B$, say $B_0$, and the
%   cardinality of $B_0$ must be equal or smaller than the cardinality
%   of $A$, thus finite. Now we choose an element $k$ from the rest part
%   of $B$, this element is the desire one, because for any element
%   $x \in A$, if it's equivalent with $k$, consider two cases for
%   $y = f(x) \in B_0$:
%   \begin{enumerate}
%   \item $y$ is equivalent with $x$. In this case by transitivity of
%     $R$, we have two distinct elements $y$ and $k$, one in $B_0$, the
%     other in $B\setminus B_0$, they're equivalent. This violates the
%     assumption that all elements in $B$ are distinct.
%   \item $y$ is arbitrary chosen because there's no equivalent element
%     for $x$ in $B$. But we already know one: $k$.
%   \end{enumerate}
%   Thus there's no element $x$ (in $A$) which is equivalent with $k$.
% \end{proof}

To reason about finite-state CCS, we also need to define the concept
of ``finite-state'':
\begin{definition}{(Definitions related to finite-state CCS)}
\begin{enumerate}
\item Define \emph{reachable} as the RTC of a relation, which
  indicates the existence of a transition between two processes:
\begin{alltt}
\HOLthm[def]{Trace.Reach_def}\hfill[Reach_def]
\end{alltt}
\item The ``nodes'' of a process is the set of all processes reachable
  from it:
\begin{alltt}
\HOLthm[def]{Trace.NODES_def}\hfill[NODES_def]
\end{alltt}
\item A process is finite-state if the set of nodes is finite:
\begin{alltt}
\HOLthm[def]{Trace.finite_state_def}\hfill[finite_state_def]
\end{alltt}
\end{enumerate}
\end{definition}

Among many properties of above definitions, we mainly rely on the
following (trivial) property for weak transitions:
\begin{proposition}
If $p$ has a weak transition onto $q$, then $q$ must be in the node set of $p$:
\begin{alltt}
\HOLthm{Trace.WEAK_TRANS_IN_NODES}\hfill[WEAK_TRANS_IN_NODES]
\end{alltt}
\end{proposition}

Using all the above results, now we can  prove the following finite
version of ``Klop lemma'':
\begin{lemma}{(Klop lemma,  finite version)}
\label{lem:klop-lemma-finite}
For any two finite-state CCS $p$ and $q$, there is another process
$k$, which is not weakly bisimilar 
with
 any weak derivative  of $p$
and $q$ (i.e., any process reachable from $p $ or $q$ by means of transitions):
\begin{alltt}
\HOLthm[nosp]{CoarsestCongr.KLOP_LEMMA_FINITE}\hfill{[KLOP_LEMMA_FINITE]}
\end{alltt}
\end{lemma}

Combining the above lemma with \texttt{PROP3_COMMON} and \texttt{COARSEST_CONGR_RL},
we can  prove the following theorem for finite-state CCS:
\begin{theorem}{(Coarsest congruence contained in $\approx$ for
    finite-state CCS)}
  \label{thm:coarsestfiniteState}
\begin{alltt}
\HOLthm{CoarsestCongr.COARSEST_CONGR_FINITE}\hfill[COARSEST_CONGR_FINITE]
\end{alltt}
\end{theorem}

% next file: part2.htex
