%%%% -*- Mode: LaTeX -*-
%%
%% This is the draft of the 3rd part of IC journal, co-authored by
%% Prof. Davide Sangiorgi and Chun Tian.

\section{The \multivariate formalisation}
\label{sec:multivariate}

In this section we attack the case of
  multiple equations (the `\multivariate' case), for two major theorems earlier discussed:
Milner's ``unique solution of equations (for $\sim$)''
(Theorem~\ref{t:Mil89s1}) and the ``unique solution of rooted
contractions'' (Theorem~\ref{t:rcontraBisimulationU}).
%
The formalisation supports finitely many
  equations/contractions and equation variables.\footnote{The original theorems
hold for even infinitely many equations and equation variables.}
We chose these two theorems because of their relevance, and
because they well illustrate the work needed in the \multivariate case.

The central problem of the \multivariate formalisation is the
representation of \multivariate CCS equations (expressions and contexts).
In the \univariate case, $\lambda$-functions
are used for representing \univariate CCS
equations, and variable substitutions are simply
applications of $\lambda$-functions to CCS terms.
This idea, however,
cannot be extended to  the \multivariate case, as we do not have a fixed number of variables to deal with.

In the literature (\citep[p.~102]{Gorrieri:2015jt}, e.g.), the variables $X_i$ of
a system of equations $\{X_i = E_i\}_{i\in I}$ are usually considered as
\emph{process variables} outside the CCS syntax.
Then, an equation body  $E_i$  is an \emph{open} expression
built with CCS operators plus these equation variables.
In a  formalisation, this means either defining a
whole new datatype (with the new equation variables), in which each CCS
operator must be duplicated, or adding equation variables as a
new primitive to the existing CCS type.
In either cases the \emph{disjointness} between equation variables and
agent variables is syntactically
guaranteed. Both solutions are rather combersome, and require a non-trivial modification
of the existing \univariate formalisation.

In our work, we have followed Milner's original
approach~\cite{milner1990operational}, using the
\emph{same} alphabet for both agent variables and equation variables.
This approach allows a large reuse of the \univariate formalisation.
For instance, the variable substitution in the  SOS rule
\texttt{REC} can be reused for substituting equation variables.
However, care is needed in the proofs of many
fundamental lemmas, mostly due to  variable capture issues between
free equation variables and bound agent variables.

\subsection{Free and bound variables}

As mentioned at the beginning of Section~\ref{s:eq},
within our CCS syntax an agent variable may occur outside the recursion in which it is bound.
Thus the same variable can appear both \emph{free} and \emph{bound} in a CCS term.
%
We denote the set of bound variables of a
given CCS term $E$ (the variables that are bound in a recursion
subexpression of $E$) as $\bv{E}$ (or \HOLtm[m\;]{BV E} in HOL), and the set of  free
variables as $\fv{E}$ (or \HOLtm[m\;]{FV E} in HOL). Both \HOLtm{BV} and \HOLtm{FV} have the
type ``\HOLty[of]{FV}'', i.e. functions taking CCS terms and returning
(finite) sets of variables (of the type \HOLty{:'a}).
For their definition the interesting cases are those of
recursion and agent variables, shown below  (here \texttt{DELETE}
and \texttt{INSERT} are set-theoretic operators of HOL's
\texttt{pred_set} theory):
\begin{center}
\begin{tabular}{|l|l|}
\hline
\HOLthm[def]{CCS.FV_var} & \HOLthm[def]{CCS.FV_rec} \\
\HOLthm[def]{CCS.BV_var} & \HOLthm[def]{CCS.BV_rec} \\
\hline
\end{tabular}
\end{center}
Furthermore, $E$ is a process, written \HOLtm{IS_PROC E}, if
it does not contain any free variable, i.e. $\fv{E} = \emptyset$:
\begin{alltt}
\HOLthm[def,>>3]{CCS.IS_PROC_def}\hfill{[IS_PROC_def]}
\end{alltt}
And a list of CCS processes can be asserted by \HOLtm{ALL_PROC} defined upon \HOLtm{IS_PROC}:
\begin{alltt}
\HOLthm[def,>>3]{CCS.ALL_PROC_def}\hfill{[ALL_PROC_def]}
\end{alltt}

The set of free and bound
variables of a term need not be disjoint, e.g.~in $X + \recu X E$.
More importantly, when going
from a CCS expression to its sub-expressions, the set of free
variables may increase, while the set of bound variables either
remains the same or decreases. For instance, $\fv{\recu X (\mu.X)} = \emptyset$, while
$\fv{\mu.X} = \{X\}$. This property of $\fv{\cdot}$ brings some
%% "transition induction" (1/2)
difficulities in transition inductions. As an evidence,
we prove the following fundamental property of
$\fv{\cdot}$~\citep[p.~1209]{milner1990operational}:
%
\begin{proposition}
\label{prop:transFV}
The derivatives of a process are themselves processes, i.e.
if $E \arr{\mu} E'$ and $\fv{E} = \emptyset$, then $\fv{E'} =
\emptyset$. Formally:
\begin{alltt}
\HOLthm[nosp]{CCS.TRANS_PROC}\hfill{[TRANS_PROC]}
\end{alltt}
\end{proposition}

\begin{proof}
We prove a stronger result, asserting that the set of free
variables in a CCS process does not increase in its derivatives:
\begin{alltt}
\HOLthm[nosp]{CCS.TRANS_FV}\hfill{[TRANS_FV]}
\end{alltt}

In~\cite{milner1990operational}, the proof of the above property is
commented as ``an easy action induction''.
As a matter of fact, in the HOL proof ``action induction'' (also
known as \emph{transition induction})
becomes a form of higher-order application
of the following \emph{induction principle} (generated together with the SOS
rules), which essentially says that \HOLtm{TRANS} is the smallest relation
satisfying the SOS rules:
\begin{alltt}
\HOLthm[nosp]{CCS.TRANS_IND}\hfill{[TRANS_IND]}
\end{alltt}
The above long theorem is of the form \HOLtm[m\;]{!P. X ==> !E u E'. TRANS E
  u E' ==> P E u E'} (with $a_0, a_1, a_2$ renamed), where the
outermost universal quantifier $P$ is a higher-order
proposition (taking $E$, $\mu$ and $E'$), and $X$ is another higher-order
proposition.
The proof goal is actually in the form of
\HOLtm[m\;]{!E u E'. TRANS E u E' ==> P E u E'}, where
\HOLtm[m\;]{P = \E u E'. FV E' SUBSET FV E}. Thus, if we can prove
$X$ under this specific $P$, by Modus Ponens (MP) the original proof
is completed.
Now the goal can be reduced to several conjunct
subgoals, each corresponding to one SOS rule. For instance, in
the subgoal for \texttt{SUM1} we need to prove
$\fv{E_1} \subseteq \fv{E} \Longrightarrow
\fv{E_1} \subseteq \fv{E + E'}$, which holds as $\fv{E}
\subseteq \fv{E + E'} = \fv{E} \cup \fv{E'}$. Eventually we have only
the following goal left (the term above the dash line is the goal,
those below the line are assumptions):
\begin{alltt}
        \HOLtm{FV E' SUBSET FV E DELETE X}
   ------------------------------------
    0.  \HOLtm{FV E' SUBSET FV ([rec X E/X] E)}
\end{alltt}
Note that \HOLtm[m\;]{FV E DELETE X = FV (rec X E)}, thus
the current proof goal is indeed the consequence of action induction on the
recursion operator.
Here the problem is that we know nothing about
\HOLtm[m\;]{FV ([rec X E/X] E)}. To further proceed, we need to prove
some other (easier) lemmas. First, the next lemma can be  proven
by  induction on $E$ and a few basic set-theoretic facts:
\begin{alltt}
\HOLthm[nosp]{CCS.FV_SUBSET}\hfill{[FV_SUBSET]}
\end{alltt}
Now, if we take $E' = \recu X E$ in the above lemma, we get
\HOLtm[m\;]{FV ([rec X E/X] E) SUBSET FV E UNION
  FV (rec X E)} $=$ \HOLtm[m\;]{FV E UNION (FV E DELETE X)} $=$
\HOLtm[m\;]{FV E}, i.e. the following lemma:
\begin{alltt}
\HOLthm[nosp]{CCS.FV_SUBSET_REC}\hfill{[FV_SUBSET_REC]}
\end{alltt}
Thus we can enrich the assumptions of the current proof goal with above
lemma, and obtain \HOLtm{FV E' SUBSET FV E} by the transitivity of $\subseteq$:
\begin{alltt}
        \HOLtm{FV E' SUBSET FV E DELETE X}
   ------------------------------------
    0.  \HOLtm{FV E' SUBSET FV ([rec X E/X] E)}
    1.  \HOLtm{FV ([rec X E/X] E) SUBSET FV E}
    2.  \HOLtm{FV E' SUBSET FV E}
\end{alltt}
Knowing \HOLtm{FV E' SUBSET FV E} we cannot prove \HOLtm{FV
  E' SUBSET FV E DELETE X}. However, if we knew \HOLtm{X
  NOTIN (FV E')}, then \HOLtm{FV E' DELETE X = FV E'}, and then
\HOLtm{FV E' SUBSET FV E ==> FV E' DELETE X SUBSET FV E
  DELETE X}, no matter if \HOLtm{X IN FV E} or not, and the proof
would be complete. Thus it remains to show that
\begin{alltt}
        \HOLtm{X NOTIN FV E'}
   ------------------------------------
    0.  \HOLtm{FV E' SUBSET FV ([rec X E/X] E)}
    1.  \HOLtm{FV ([rec X E/X] E) SUBSET FV E}
    2.  \HOLtm{FV E' SUBSET FV E}
\end{alltt}
Now we try the proof by contradiction (\emph{reductio ad absurdum}): if
the goal does not hold, i.e.
\HOLtm{X IN FV E'}, then by assumption 0 we have \HOLtm{X IN FV ([rec X
  E/X] E)}:
\begin{alltt}
        F
   ------------------------------------
    0.  \HOLtm{FV E' SUBSET FV ([rec X E/X] E)}
    1.  \HOLtm{FV ([rec X E/X] E) SUBSET FV E}
    2.  \HOLtm{FV E' SUBSET FV E}
    3.  \HOLtm{X IN FV E'}
    4.  \HOLtm{X IN FV ([rec X E/X] E)}
\end{alltt}
But this is impossible, because all free occurrences of $X$ in $E$ now become
bound in the form of $\recu X E$. In fact, the following lemma can be
proven by induction on $E$:
\begin{alltt}
\HOLthm[nosp]{CCS.NOTIN_FV_lemma}\hfill{[NOTIN_FV_lemma]}
\end{alltt}
Adding the above lemma (taking $E' = E$) into the assumption list immediately causes
a contradiction with assumption 4, and the proof finally completes.
\end{proof}

Proposition~\ref{prop:transFV} is essential in the proofs of the
  \multivariate versions of all unique-solution theorems.
On the other hand, the analogous
result for bound variables is indeed just a simple
%% transition induction
transition induction. (The easy proof is omitted.)
\begin{proposition}
\label{prop:transBV}
if $E \arr{\mu} E'$ then $\bv{E'} \subseteq \bv{E}$, or formally:
\begin{alltt}
\HOLthm[nosp]{CCS.TRANS_BV}\hfill{[TRANS_BV]}
\end{alltt}
\end{proposition}
% \begin{proof}
% Following the proof of Proposition~\ref{prop:transFV}, we do action
% induction on $E \arr{\mu} E'$ and simplify all subgoals by set-theoretic
% facts. The only subgoal left is:
% \begin{alltt}
%         \HOLtm{BV E' SUBSET X INSERT BV E}
%    ------------------------------------
%     0.  \HOLtm{BV E' SUBSET BV ([rec X E/X] E)}
% \end{alltt}
% Note the difference with the proof of Proposition~\ref{prop:transFV}: now
% we have \texttt{INSERT} in place of \texttt{DELETE}. Then, we directly
% use the assumption and the transitivity of $\subseteq$ and try to
% prove the following goal instead:
% \begin{alltt}
%         \HOLtm{BV ([rec X E/X] E) SUBSET X INSERT BV E}
%    ------------------------------------
%     0.  \HOLtm{BV E' SUBSET BV ([rec X E/X] E)}
% \end{alltt}
% This is an easy goal, due to the following lemma which is
%  proved by doing induction on $E$:
% \begin{alltt}
% \HOLthm[nosp]{CCS.BV_SUBSET}\hfill{[BV_SUBSET]}
% \end{alltt}
% Taking $E ' = \recu X E$ in the above lemma, we have
%     \HOLtm[m\;]{BV ([rec X E/X] E) SUBSET BV E UNION BV (rec X E)},
%     the right side equals to \HOLtm[m\;]{BV E UNION (X INSERT BV E)} $=$
%     \HOLtm[m\;]{X INSERT BV E}.
% This completes the proof.
% \end{proof}

\subsection{\Multivariate substitutions}

There are two natural ways to implement
the \multivariate substitution $E\{\til P/\til X\}$, which replaces each free
occurrence of the variables $X_i$ in $E$ with the corresponding
$P_i$: (1) iterately applying the existing \univariate
\HOLtm[-SUB]{CCS_Subst}; (2) defining a new \multivariate substitution
function which substitutes all variables $\til X$ in parallel.
Note that there is the
possibility that $\til P$ syntactically again contains variables from $\til X$, thus
different orders of iterated substitutions may lead to different results.
We thus prefer to define a \multivariate version of \HOLtm[-SUB]{CCS_Subst}
called \HOLtm[-SUB]{CCS_SUBST}, based on HOL
\texttt{finite\_map} theory~\cite{holdesc}.

A finite map (of the type \HOLty{:'a |-> 'b}) is like a function (of the type
\HOLty{:'a -> 'b}) having only finitely many elements in its
domain. In HOL, an empty finite map is denoted as \HOLtm{FEMPTY}.
If \HOLtm{fm} is a finite map, its domain (as a set of keys) is denoted as
\HOLtm{FDOM fm}. Applying \HOLtm{fm} on a certain key, say $k$, is denoted
by \HOLtm{FAPPLY fm k}.

The function \HOLtm[-SUB]{CCS_SUBST} takes a finite
map \HOLtm{fm} (of the type \HOLty{:'a |-> ('a, 'b) CCS}) and a CCS expression,
and returns another CCS expression in which
all occurrences of variables in the finite domain of \HOLtm{fm} are substituted with
the corresponding value in \HOLtm{fm}. Initially, such a finite map can be built from
a list of variables \HOLtm{Xs} and the corresponding substituted terms
\HOLtm{Ps} by a helper function \HOLtm{fromList} (whose details are
omitted here).
\HOLtm[m\;,-SUB]{CCS_SUBST (fromList Xs Ps) E} is usually
abbreviated as \HOLtm[m\;]{CCS_SUBST (fromList Xs Ps) E}.
Using finite maps, the substitution mechanism is order-independent. For most CCS operators,
\HOLtm[-SUB]{CCS_SUBST}
 recursively calls itself on subterms. The most
interesting cases are at agent variables and recursion:
\begin{alltt}
\HOLthm[def,>>3]{Multivariate.CCS_SUBST_var}\hfill{[CCS_SUBST_var]}

\HOLthm[def,>>3]{Multivariate.CCS_SUBST_rec}\hfill{[CCS_SUBST_rec]}
\end{alltt}
Variable substitution only occurs on free
variables. When the term $E$ of ``\HOLtm[m\;]{CCS_SUBST fm E}''
is in the form of $\recu X E'$, if $X$ (a bound variable) is in
the domain of \HOLtm{fm}, \HOLtm{CCS_SUBST} must continue the
substitution on $E'$ using a reduced map~--- without $X$~--- so that all
occurences of $X$ in $E'$ are correctly bypassed.
Since \HOLtm{CCS_SUBST} only runs
once on each subterm, the possible free variables in  \HOLtm{Ps} are never
 substituted.

Below we present some key lemmas about
\HOLtm{CCS_SUBST}, omitting the proofs:\footnote{Hereafter,
  some new logical constants from HOL's \texttt{pred_set}
and \texttt{list} theories are used (see~\cite{holdesc} for more
details.): \HOLtm{DISJOINT} denotes set disjointness;
``\HOLtm[m\;]{set Xs}'' is the set converted from the list \HOLtm{Xs};
\HOLtm{ALL_DISTINCT} says that
the elements of a list are distinct; \HOLtm{MAP} is
the mapping function from one list to another; \HOLtm{EVERY} means
each element of a list satisfies a predicate; \HOLtm{ZIP} creates a
new list from two lists of the same length, and each element of the new list is a pair of
elements from the given lists.}

\begin{lemma}[\texttt{CCS_SUBST_elim}]
If the free variables of $E$ is disjoint with \HOLtm{Xs}, a
substitution of \HOLtm{Xs} in $E$ does not change $E$:
\begin{alltt}
\HOLthm{Multivariate.CCS_SUBST_elim}
\end{alltt}
\end{lemma}

\begin{lemma}[\texttt{CCS_SUBST_self}]
  Substituting each free variable $X$ % of \HOLtm{Xs}
  in $E$ with \HOLtm[m\;]{var X} (itself) does not change $E$:
\begin{alltt}
\HOLthm{Multivariate.CCS_SUBST_self}
\end{alltt}
\end{lemma}

The next lemma plays an important role. It essentially swaps the order of two substitutions:
\begin{lemma}[\texttt{CCS_SUBST_nested}]
Under certain conditions (to get rid of substitution orders), two nested substitutions can be
converted into a single substitution where the targets are substituted first:
\begin{alltt}
\HOLthm{Multivariate.CCS_SUBST_nested}
\end{alltt}
\end{lemma}

The next three lemmas show the relative correctness of \texttt{CCS\_SUBST}
w.r.t.~\texttt{CCS\_Subst}:
\begin{lemma}[\texttt{CCS_SUBST_sing}]
  If there is only one single variable $X$ in the map (with the target
  expression $E'$), then \HOLtm[-SUB]{CCS_SUBST} behaves exactly the
  same as (the \univariate) \HOLtm[-SUB]{CCS_Subst}:
\begin{alltt}
\HOLthm{Multivariate.CCS_SUBST_sing}
\end{alltt}
\end{lemma}

\begin{lemma}[\texttt{CCS_SUBST_reduce}]
Under certain conditions (to get rid of substitution orders), a \multivariate substitution of variables
\HOLtm{X::Xs} can be reduced to a \multivariate substitution of
variables \HOLtm{Xs} and an \univariate substitution of $X$:
\begin{alltt}
\HOLthm{Multivariate.CCS_SUBST_reduce}
\end{alltt}
\end{lemma}

\begin{lemma}[\texttt{CCS_SUBST_FOLDR}]
Under certain conditions (to get rid of substitution orders), a
\multivariate substitution can be reduced to repeated applications
of \univariate substitutions of each variable:
\begin{alltt}
\HOLthm{Multivariate.CCS_SUBST_FOLDR}
\end{alltt}
\end{lemma}

Finally, the following two lemmas precisely estimate the free and
bound variables of a substituted term:
\begin{lemma}[\texttt{BV_SUBSET_BIGUNION}]
The bound variables of \HOLtm[m\;]{CCS_SUBST (fromList Xs Ps) E}
are contained in the union of the bound variables in $E$ and \HOLtm{Ps}.
\begin{alltt}
\HOLthm{Multivariate.BV_SUBSET_BIGUNION}
\end{alltt}
\end{lemma}

\begin{lemma}[\texttt{FV_SUBSET_BIGUNION_PRO}]
The free variables of \HOLtm[m\;]{CCS_SUBST (fromList Xs Ps) E}
are contained in the union of the free variables in $E$ and \HOLtm{Ps},
excluding \HOLtm{Xs}.
\begin{alltt}
\HOLthm{Multivariate.FV_SUBSET_BIGUNION_PRO}
\end{alltt}
\end{lemma}

In some of the above lemmas, the condition
\HOLtm[m\;]{DISJOINT (BV E) (set Xs)} (the bound
variables of $E$ and the free substitution variables are disjoint) is
added to ease the proofs. The condition
is not necessary and could be eliminated, at the price of some extra effort.

\subsection{\Multivariate (weakly guarded) contexts}

As mentioned in
Section~\ref{ss:context}, \univariate contexts and their
guarded companions are defined as predicates over $\lambda$-expressions
of the type ``\HOLty{:('a, 'b) CCS -> ('a, 'b) CCS}''. These predicates, such as
\HOLtm{CONTEXT}
(multi-hole contexts), \HOLtm{WG} (weak guarded contexts),
\HOLtm{SG} (guarded contexts) and \HOLtm{SEQ} (sequential
contexts), are all defined inductively, i.e.~they are built from some ``holes''
in a bottom-up manner. For instance, \HOLtm[m\;]{WG (\t. prefix a t || P)}
holds because \HOLtm[m\;]{WG (\t. prefix a t)}
holds as a base case of the inductive definition of \HOLtm{WG}:
\begin{alltt}
\HOLthm[nosp]{Congruence.WG1}\hfill{[WG1]}
\end{alltt}
For any agent variable $X$, we have by $\beta$-reduction:
\HOLtm[m\;]{(\t. prefix l t + P) (var X) = prefix l (var X) + P} (or ``$l.X + P$'' in textbook
notation), and the expression is weakly guarded (Def.~\ref{def:guardness}).

It could be possible to inductively define \multivariate contexts and their
guarded variants, but care is needed for
variables that occur within a recusion. We have preferred a different
solution, in which the definitions of \multivariate contexts  is based on the
existing \univariate definitions.
For this, intuitively, we replace a single variable with a hole (viewing
the other variables as constants), so to obtain a  single-variable context
on which predicates like \HOLtm{CONTEXT} can be used.
For example, to see the weak guardedness of $a.X + b.X + c.Y$,
we substitute each occurrence of a variable with a ``hole'' and consider the
resulting term as a multi-hole context (i.e., a $\lambda$-function); then all such multi-hole contexts
should satisfy \HOLtm{WG}, i.e.~the following results hold:
\begin{alltt}
\HOLthm{Example.WG_example1}
\HOLthm{Example.WG_example2}
\end{alltt}
Note that \HOLtm[m\;]{prefix a t + prefix b t + prefix c (var
  Y) = CCS_Subst (prefix a (var X) + prefix b
  (var X) + prefix c  (var Y)) t X}
can be expressed as a \univariate substitution of the original term.
This idea leads to the following definitions:
\begin{alltt}
\HOLthm[def,>>3]{Multivariate.context_def}\hfill{[context_def]}

\HOLthm[def,>>3]{Multivariate.weakly_guarded_def}\hfill{[weakly_guarded_def]}
\end{alltt}
The above definitions take an extra list of variables \HOLtm{Xs} and
assert the CCS expression \HOLtm{E} with respect to this list. This
allows us to formalise the concepts of contexts and guardedness
independently of the free variables of \HOLtm{E}.
Then a logical term ``\HOLtm[m\;]{weakly_guarded
  (SET_TO_LIST (FV E)) E}'' can
be used to assert the weak guardedness of $E$ w.r.t.~all its free
variables.\footnote{Here \HOLtm{SET_TO_LIST} converts a finite set
  to a list of the same elements. It turns out that we never need this, because
  in all unique-solution theorems a list of variables \HOLtm{Xs} is fixed and
  then all equations are required to contain free variables in
  \HOLtm{Xs}.}
(The \multivariate guardedness and sequentiality can also be defined similarily, using
their \univariate companions \HOLtm{SG} and \HOLtm{SEQ}.)

The most important property of \multivariate contexts is that strong bisimilarity
and other (pre)congruence relations are preserved by them, for instance:
\begin{lemma}[\texttt{STRONG_EQUIV_subst_context}]
If two tuples of processes $\til P$ and $\til Q$ are strongly
bisimilar\footnote{A HOL term like \HOLtm[m\;]{STRONG_EQUIV Ps Qs}
  means that two lists of CCS processes are componentwise
  bisimilar ($P_i \sim Q_i$).}, then
for any context $E$, $E\{\til P/\til X\}$ and
$E\{\til Q/\til X\}$ are strongly bisimilar:
\begin{alltt}
\HOLthm{Multivariate.STRONG_EQUIV_subst_context}
\end{alltt}
\end{lemma}
%
Similar properties also hold if $\sim$ is replaced with rooted
bisimilarity ($\rapprox$) and rooted contraction ($\rcontr$). It does
not hold for weak bisimilarity ($\wb$) and the contraction
preorder ($\mcontrBIS$), as they are not (pre)congruence relations.

Another important property of contexts is their composability: if we
substitute some free variables in a context with some other contexts, the
resulting term is still a valid context (w.r.t.~the same set of variables):
\begin{alltt}
\HOLthm{Multivariate.context_combin}\hfill{[context_combin]}
\end{alltt}

Not every term within the CCS syntax is a context, as
context (or equation) variables are not allowed to occur within recursion. The converse
holds however: if the set of free variables of a CCS term
is disjoint from a list of variables, then the term is indeed a context
w.r.t. such list of variables:
\begin{alltt}
\HOLthm{Multivariate.disjoint_imp_context}\hfill{[disjoint_imp_context]}
\end{alltt}
On the other hand, for any context (w.r.t.~$\til X$) of the form $\recu Y E$,
the set of free variables of $E$ excluding $Y$ is disjoint with $\til X$:
\begin{alltt}
\HOLthm{Multivariate.context_rec}\hfill{[context_rec]}
\end{alltt}
In the above lemma we cannot
conclude \HOLtm[m\;]{DISJOINT (FV E) (set Xs)},
because $Y$ may appear in both sets.
We also cannot conclude \HOLtm[m\;]{context Xs E}, because in $\recu Y E$
the bound variable $Y$ may occur freely within another nested
recursion. For instance, variable $Y$ is free
in $\recu Y E$ , for $E = \recu Z (a.Y + b.Z) + c.Y$.

For weakly guarded contexts, % (which are also normal contexts),
besides their usual properties as in the \univariate case (i.e., weak
guardedness, \HOLtm{WG}), we also need
their composability w.r.t.~\multivariate contexts: if we
substitute some free variables in a context $C$ with some weakly guarded
contexts, the resulting context is weakly guarded (w.r.t.~the same set of variables):
\begin{alltt}
\HOLthm{Multivariate.weakly_guarded_combin}\hfill{[weakly_guarded_combin]}
\end{alltt}

\subsection{\Multivariate equations and solutions}

With the formal definitions of \multivariate substitution and
\multivariate (weakly guarded) contexts, now we are ready to formally
define \multivariate CCS equations/contractions and their (unique)
solutions. Consider a system of equation $\{X_i = E_i\}_{i\in I}$
(Def.~\ref{def:equation}), or its expanded form (here we suppose $I = [1,n]
\in \mathbb{N}$, i.e.~a finite list):
\begin{equation*}
  \begin{cases}
    &X_1 = E_1[\til X] \\
    &X_2 = E_2[\til X] \\
    & \cdots \\
    &X_n = E_n[\til X]
  \end{cases}
\end{equation*}
Consider its two essential ingredients:
\begin{itemize}
\item $\til X = (X_1, X_2, \ldots, X_n)$: a list of equation variables;
\item $\til E = (E_1, E_2, \ldots, E_n)$: a list of CCS contexts
  with possible occurrences of free variables in $\til X$.
\end{itemize}
The two lists $\til X$ and $\til E$ should have the same
length, and  the variables in $\til X$ should  be distinct.
Furthermore, $\til E$ does not contain free variables that are not in $\til X$.
Finally, for each
$E_i$, the set of its bound variables should be \emph{disjoint} from $\til X$.
These requirements yield the fomal
definition of \multivariate CCS equation:
\begin{alltt}
\HOLthm[def,>>3]{Multivariate.CCS_equation_def}\hfill{[CCS_equation_def]}
\end{alltt}

Now consider (formally) what is a solution $\til P$ of CCS equations. First of
all, the definition should be parametrized on a binary CCS
relation $\R$ such as $\sim$ and $\rcontr$, so that a single definition
can be used to represent solutions of all kinds of CCS
equations. Then, ${\til P} \ \R\  {\til E}\{\til P/\til X\}$ should hold:
\begin{equation*}
  \begin{cases}
    &P_1 \ \R\ E_1\{\til P/\til X\} \\
    &P_2 \ \R\ E_2\{\til P/\til X\} \\
    & \cdots \\
    &P_n \ \R\ E_n\{\til P/\til X\}
  \end{cases}
\end{equation*}
Furthermore, each $P_i$ should be a pure process, i.e.~having no free
variable. Finally, the set of bound variables is disjoint with
$\til X$. (This disjointness requirement is optional but makes many proofs
easier.) Putting all together,
below is the formal definition of a solution of \multivariate CCS
equations:\footnote{If $R$ is a binary relation of CCS processes,
  \HOLtm[m\;]{LIST_REL R} is the same binary relation but for lists of
  CCS processes with the same length.
  implicitly implies that the two lists $A$ and $B$ have the same length.}
\begin{alltt}
\HOLthm[def,>>3]{Multivariate.CCS_solution_def}\hfill{[CCS_solution_def]}
\end{alltt}
Note that the two logical terms ``\HOLtm[m\;]{CCS_solution R
  Xs Es Ps}'' and ``\HOLtm[m\;]{Ps IN  (CCS_solution R Xs Es)}'' in
HOL have the same meaning. The latter form suggests that
``\HOLtm[m\;]{CCS_solution R Xs Es}'' is actually a set containing all
solutions of ``\HOLtm[m\;]{CCS_equation Xs Es}''. Then the unique-solution
theorems can be understood thus: any two (syntactically different) elements
in the solution set are bisimilar.

\subsection{Unique solution of equations/contractions (the \multivariate version)}

With all above machineries of \multivariate contexts and substitutions,
the \multivariate case of Lemma~\ref{lem:milner313} is formalised
below (\texttt{strong_unique_solution_lemma}):
\begin{alltt}
\HOLthm{Multivariate.strong_unique_solution_lemma}
\end{alltt}

The \multivariate version of Theorem~\ref{t:Mil89s1} is formalised thus:
\begin{alltt}
\HOLthm{Multivariate.strong_unique_solution_thm}\hfill{[strong_unique_solution_thm]}
\end{alltt}

Now the \multivariate version of Theorem~\ref{t:rcontraBisimulationU}:
\begin{alltt}
\HOLthm{Multivariate.unique_solution_of_rooted_contractions}\hfill{[unique_solution_of_rooted_contractions]}
\end{alltt}
In summary, while each
step related to \multivariate substitutions is more difficult than
that for the \univariate case, the structure of the 
 the overall proofs is the same;  
various proof steps can even be copied from the \univariate case.

% next file: related.tex
