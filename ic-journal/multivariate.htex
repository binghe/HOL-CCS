%%%% -*- Mode: LaTeX -*-

\section{The multivariate formalisation}
\label{sec:multivariate}

In this section, the formalisation of the multivariate (general)
cases of Milner's ``unique solution of equations (for $\sim$)''
(Theorem~\ref{t:Mil89s1}) and our ``unique solution of rooted
contractions'' (Theorem~\ref{t:rcontraBisimulationU}) is
described.
We choose these two theorems because they both depend on the same
concept of ``weakly guarded contexts'', and Lemma~\ref{lem:milner313}.
This work is entirely new after~\cite{EPTCS276.10}.
It is accumulative, completely based on the
existing formal framework in the sense that, neither the CCS datatype nor
the SOS rules need to be changed.

The central problem of the multivariate formalisation is the
representation of CCS equations (expressions, contexts).
Recall the univariate formalisation, $\lambda$-functions (of type
$CCS\rightarrow CCS$) are used to represent univariate CCS
equations, and variable substitutions are simply done by
calling $\lambda$-functions on the target CCS terms.
This idea cannot be extended to the multivariate case, as
we don't have a fixed number of variables to deal with.

Modern literature (i.e.~after Milner) usually consider the $X_i$ of
a system of equations $\{X_i = E_i\}_{i\in I}$ (c.f. Def.~\ref{def:equation}) as an
\emph{equation variable (or process variable)}~\citep[p.~102]{Gorrieri:2015jt}
\emph{outside} of the CCS syntax, and treat $E_i$ as an \emph{open} expression
built with CCS operators which may contain some occurrences of $X_i$.
For a formal point of view, this means we either need to define a
whole new datatype (with extra equation variables) in which each CCS
opeartor must be duplicated, or we should add equation variables as a
new primitive (e.g.~\texttt{Var X}) in the existing CCS type, beside the recursion
variables (e.g.~\texttt{var X}). Then the substitution of equation
variables in $E_i\{\til P/\til X\}$ would be simply the \emph{syntactic substitution} of
each occurrence of $X_i$ in $E_i$ with the corresponding $P_i$. Notice that, in
either case the \emph{disjointness} between equation variables and recursion
variables (i.e. constants) is obvious and syntactically
guaranteed. However, neither solution is elegant: dealing with another CCS-like type makes the
whole formalisation work ugly and we loose the (possibly valuable) bisimilarity concepts and
transitional semantics of CCS expressions; on the other hand,
modifying the CCS datatype to just support the formalisation of
unique-solution theorems is also not acceptable.

In this project, we have chosen to adopt Milner's original approach,
which is also the most elegant way: reusing \emph{free} recursion variables
(i.e. undefined constants) as equation variables, then the variable
substitution function used in SOS rules [\texttt{REC}] can be also
used for substituting eqaution variables.
However, this approach brings us great difficulities in proving many
fundamental lemmas, mostly due to the variable capture issues between
equation variables and recursion variables. We believe all these
issues are solvable.

\subsection{Free and bound variables}

Recall the beginning of Section~\ref{s:eq},
the CCS syntax leaves the syntactic possibility that an
agent variable $A$ occurs outside the recursion operator of the same
variable. In Milner's original book chapter~\cite{milner1990operational}, the
variables which occur in Recursion (such as $X$ in $\recu X E$) are
called \emph{bound} variables, while those which occur unbound are called
\emph{free} variables. We denote the set of all bound variables of a
given CCS term $E$ as ``\HOLtm{BV E}'', and the set of all free
variables as ``\HOLtm{FV E}''. In HOL, both \HOLtm{BV} and \HOLtm{FV} have the
type ``\HOLty[of]{FV}'' (taking a CCS term returning a set of variable).
Milner didn't give their definitions explicitly, however, 

\begin{center}
\begin{tabular}{|l|l|}
\hline
\HOLthm[def]{CCS.FV_var} & \HOLthm[def]{CCS.FV_rec} \\
\HOLthm[def]{CCS.BV_var} & \HOLthm[def]{CCS.BV_rec} \\
\hline
\end{tabular}
\end{center}

\begin{small}
\begin{alltt}
\HOLthm[nosp,width=90]{CCS.TRANS_IND}
\end{alltt}
\end{small}

\begin{alltt}
\HOLthm{CCS.TRANS_BV}

\HOLthm{CCS.TRANS_FV}
\end{alltt}

\begin{alltt}
\HOLthm[def,>>3]{CCS.IS_PROC_def}

\HOLthm{CCS.TRANS_PROC}
\end{alltt}

\subsection{Multivariate substitutions}

\begin{alltt}
\HOLthm[def,>>3]{Multivariate.CCS_SUBST_var}

\HOLthm[def,>>3]{Multivariate.CCS_SUBST_rec}
\end{alltt}

\begin{alltt}
\HOLthm[-SUB]{Multivariate.CCS_SUBST_SING}

\HOLthm{Multivariate.CCS_SUBST_elim}

\HOLthm{Multivariate.CCS_SUBST_reduce}

\HOLthm{Multivariate.CCS_SUBST_FOLDR}

\HOLthm{Multivariate.CCS_SUBST_self}

\HOLthm{Multivariate.CCS_SUBST_nested}

\HOLthm{Multivariate.BV_SUBSET_BIGUNION}

\HOLthm{Multivariate.FV_SUBSET_BIGUNION_PRO}
\end{alltt}

\subsection{Multivariate (weakly-guarded) contexts}

\begin{alltt}
\HOLthm[def,>>3]{Multivariate.context_def}

\HOLthm{Multivariate.context_combin}

\HOLthm{Multivariate.STRONG_EQUIV_subst_context}

\HOLthm{Multivariate.OBS_CONGR_subst_context}

\HOLthm{Multivariate.OBS_contracts_subst_context}
\end{alltt}

\begin{alltt}
\HOLthm[def,>>3]{Multivariate.weakly_guarded_def}

\HOLthm{Multivariate.weakly_guarded_imp_context}

\HOLthm{Multivariate.weakly_guarded_combin}
\end{alltt}

\subsection{Multivariate equations and solutions}

\begin{alltt}
\HOLthm{Multivariate.CCS_equation_def}

\HOLthm{Multivariate.CCS_solution_def}
\end{alltt}

\subsection{Unique solution of equations for $\sim$ (the multivariate version)}

\begin{alltt}
\HOLthm{Multivariate.strong_unique_solution_lemma}
  
\HOLthm{Multivariate.strong_unique_solution_thm}\hfill{[strong_unique_solution_thm]}
\end{alltt}

\subsection{Unique solution of rooted contractions (the multivariate version)}

\begin{alltt}
\HOLthm{Multivariate.unique_solution_of_rooted_contractions}\hfill{[unique_solution_of_rooted_contractions]}
\end{alltt}
