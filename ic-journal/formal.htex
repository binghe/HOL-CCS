\section{The formalisation}
\label{s:for}

We highlight here a formalisation of CCS in the HOL theorem prover
(HOL4)~\cite{Melham:1993vl,slind2008brief}, \hl{with a focus towards the
theory (and formal proofs) of the unique solution of
equations/contractions theorems} mentioned in Section~\ref{s:eq} and
\ref{s:mcontr}.
%  The main purpose is to convince the readers that, there's no flaw
%  in the informal proofs. 
\hl{The univariate versions of these theorems, apart from minor fixes and
extensions in this paper, was already described in}
\cite{Tian:2017wrba}. The multivariate proofs and the related results
are new, and will be described in Section~\ref{sec:multivariate}.
All proof scripts are available as part of HOL's official
examples\footnote{\url{https://github.com/HOL-Theorem-Prover/HOL/tree/master/examples/CCS}}.
The work so far consists of about 24,000 lines (1MB) of code in total,
in which about 5,000 lines were derived from the early work of Monica
Nesi~\cite{Nesi:1992ve} on HOL88, with major modifications.

Higher Order Logic (HOL)~\cite{hollogic} traces
its roots back to LCF
\cite{gordon1979edinburgh,milner1972logic} by Robin Milner and others
since \hl{1972. It} is a variant of
Churchâ€™s Simple Theory of Types (STT)~\cite{church1940formulation},
plus a higher order version of Hilbert's choice operator $\varepsilon$,
Axiom of Infinity, and Rank-1 (prenex) polymorphism.
HOL4 has implemented the original HOL, 
while some other theorem provers in HOL family (e.g. Isabelle/HOL) have
certain extensions.
%  (they made the formal language more powerful,
% but they also bring the possibilities that the entire logic becomes
% inconsistent). 
Indeed the HOL has \hl{considerably} simpler logical
foundations than most other theorem provers. %, e.g. Coq. 
\hl{As a consequence, theories and proofs verified in HOL are relatively more
convincible to non-experts who are not familar with more advanced
dependent type theories.}

HOL4 is implemented in Standard ML, the same programming language who
plays three different roles:
\begin{enumerate}
\item the underlying implementation language for the core HOL engine;
\item \hl{the language in which proof tactics are implemented;}
\item \hl{the interface (outer) language of the HOL proof scripts and
  interactive shell.}
\end{enumerate}
Moreover, using the same language HOL4 users can write complex automatic
verification tools by calling HOL's theorem proving
facilities. The formal proofs of theorems in CCS theory
are mostly done by an \emph{interactive process} closely following
their informal proofs, with minimal automatic proof searching.

\hl{TODO: some background knowledge about HOL itself (the logic fundations)}

% next file: sos.htex
